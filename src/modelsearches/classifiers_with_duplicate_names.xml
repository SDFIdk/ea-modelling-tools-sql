<?xml  version='1.0' encoding='UTF-8' ?>
<RootSearch><Search Name="classifiers_with_duplicate_names" GUID="{48EEA0D3-5401-4aeb-8913-97765C27DC71}" PkgGUID="-1" Type="0" LnksToObj="0" CustomSearch="1" AddinAndMethodName=""><SrchOn><RootTable Filter="SELECT&#xA;&#x9;o.ea_guid AS CLASSGUID,&#xA;&#x9;o.object_type AS CLASSTYPE,&#xA;&#x9;o.name,&#xA;&#x9;o.object_type,&#xA;&#x9;o.stereotype&#xA;FROM&#xA;&#x9;t_object o&#xA;WHERE&#xA;&#x9;o.package_id IN (#Branch#)&#xA;&#x9;AND object_type IN ('Class', 'Enumeration', 'Interface', 'DataType')&#xA;&#x9;AND EXISTS&#xA;(&#xA;&#x9;SELECT&#xA;&#x9;&#x9;*&#xA;&#x9;FROM&#xA;&#x9;&#x9;t_object o2&#xA;&#x9;WHERE&#xA;&#x9;&#x9;o2.package_id IN (#Branch#)&#xA;&#x9;&#x9;&#x9;AND o2.name = o.name&#xA;&#x9;&#x9;&#x9;AND o2.ea_guid &lt;&gt; o.ea_guid);&#xA;#DB=COMMENT# Find the classifiers that have the same name as another classifier in the given package and its subpackages. This interpretation is stricter than the UML 2.5.1 specification, where a package is a namespace, and its subpackages are other namespaces. This query also finds the classifiers that have the same name but are of a different kind. This interpretation is stricter than the UML 2.5.1 specification, that permits named elements to have the same name if they are of a different kind. See operation isDistinguishableFrom() in clause 7.8.9.7, operation membersAreDistinguishable() in clause 7.8.10.8 and constraint members_distinguisable in clause 7.8.10.7. #DB=COMMENT#" Type="-1"><TableName Display="Custom SQL Search" Name=""/><TableHierarchy Display="" Hierarchy=""/></RootTable></SrchOn><LnksTo/></Search></RootSearch>