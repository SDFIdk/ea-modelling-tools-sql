<?xml  version='1.0' encoding='UTF-8' ?>
<RootSearch><Search Name="navigable_association_ends_without_explicit_multiplicity" GUID="{FF296FE5-DC53-48db-AC6A-3938807F237E}" PkgGUID="-1" Type="0" LnksToObj="0" CustomSearch="1" AddinAndMethodName=""><SrchOn><RootTable Filter="select c.ea_guid as classguid, c.connector_type as classtype, 't_connector' as classtable, o_start.name as start_classifier_name, c.name as association_name, c.destrole as end_classifier_role, o_end.name as end_classifier_name&#xA;from (t_connector c inner join t_object o_start on c.start_object_id = o_start.object_id) inner join t_object o_end on c.end_object_id = o_end.object_id&#xA;where (((o_start.package_id in (#Branch#) and o_end.package_id in (#Branch#) and c.connector_type in ('Association', 'Aggregation'))&#xA;or (o_start.package_id in (#Branch#) and (c.connector_type = 'Association' or (c.connector_type = 'Aggregation' and c.subtype = 'Weak')))&#xA;or (o_end.package_id in (#Branch#) and c.connector_type = 'Aggregation' and c.subtype = 'Strong'))&#xA;and c.direction in ('Source -&gt; Destination', 'Bi-Directional'))&#xA;and c.destcard is null&#xA;union all&#xA;select c.ea_guid, c.connector_type, 't_connector', o_end.name, c.name, c.sourcerole as end_classifier_role, o_start.name&#xA;from (t_connector c inner join t_object o_start on c.start_object_id = o_start.object_id) inner join t_object o_end on c.end_object_id = o_end.object_id&#xA;where (((o_start.package_id in (#Branch#) and o_end.package_id in (#Branch#) and c.connector_type in ('Association', 'Aggregation'))&#xA;or (o_start.package_id in (#Branch#) and (c.connector_type = 'Association' or (c.connector_type = 'Aggregation' and c.subtype = 'Weak')))&#xA;or (o_end.package_id in (#Branch#) and c.connector_type = 'Aggregation' and c.subtype = 'Strong'))&#xA;and c.direction in ('Destination -&gt; Source', 'Bi-Directional'))&#xA;and c.sourcecard is null;&#xA;#DB=COMMENT# Find the navigable association ends that don't have a multiplicity specified explicitly. If it is not specified, it is assumed to be one, according to the UML specification. However, having a explicitly specified multiplicity is preferable. #DB=COMMENT#" Type="-1"><TableName Display="Custom SQL Search" Name=""/><TableHierarchy Display="" Hierarchy=""/></RootTable></SrchOn><LnksTo/></Search></RootSearch>